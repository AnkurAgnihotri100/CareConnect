// src/components/Dashboard/Dashboard.js
import React, { useState, useEffect } from 'react';
import { Calendar, Heart, MessageCircle, Bell, User, Activity } from 'lucide-react';
import './Dashboard.css';

const Dashboard = ({ user }) => {
  const [appointments, setAppointments] = useState([]);
  const [healthMetrics, setHealthMetrics] = useState({});
  const [notifications, setNotifications] = useState([]);

  useEffect(() => {
    // Fetch user data on component mount
    fetchUserData();
  }, []);

  const fetchUserData = async () => {
    try {
      // Replace with your API endpoints
      const appointmentsResponse = await fetch(`/api/appointments/${user.id}`);
      const metricsResponse = await fetch(`/api/health-metrics/${user.id}`);
      const notificationsResponse = await fetch(`/api/notifications/${user.id}`);
      
      setAppointments(await appointmentsResponse.json());
      setHealthMetrics(await metricsResponse.json());
      setNotifications(await notificationsResponse.json());
    } catch (error) {
      console.error('Error fetching user data:', error);
    }
  };

  const getNextAppointment = () => {
    const upcoming = appointments
      .filter(apt => new Date(apt.date) > new Date())
      .sort((a, b) => new Date(a.date) - new Date(b.date));
    return upcoming[0];
  };

  const getBMIStatus = (bmi) => {
    if (bmi < 18.5) return { status: 'Underweight', color: '#3b82f6' };
    if (bmi < 25) return { status: 'Normal', color: '#10b981' };
    if (bmi < 30) return { status: 'Overweight', color: '#f59e0b' };
    return { status: 'Obese', color: '#ef4444' };
  };

  const nextAppointment = getNextAppointment();
  const bmiInfo = healthMetrics.bmi ? getBMIStatus(healthMetrics.bmi) : null;

  return (
    <div className="dashboard">
      <div className="dashboard-header">
        <h1>Welcome back, {user.name}!</h1>
        <p>Here's your health overview for today</p>
      </div>

      <div className="dashboard-grid">
        {/* Quick Stats */}
        <div className="dashboard-card stats-card">
          <h3>Health Overview</h3>
          <div className="stats-grid">
            <div className="stat-item">
              <Activity className="stat-icon" />
              <div>
                <span className="stat-value">{healthMetrics.bmi || 'N/A'}</span>
                <span className="stat-label">BMI</span>
                {bmiInfo && (
                  <span 
                    className="stat-status" 
                    style={{ color: bmiInfo.color }}
                  >
                    {bmiInfo.status}
                  </span>
                )}
              </div>
            </div>
            <div className="stat-item">
              <Heart className="stat-icon" />
              <div>
                <span className="stat-value">{healthMetrics.heartRate || 'N/A'}</span>
                <span className="stat-label">Heart Rate</span>
              </div>
            </div>
          </div>
        </div>

        {/* Next Appointment */}
        <div className="dashboard-card appointment-card">
          <h3>
            <Calendar className="card-icon" />
            Next Appointment
          </h3>
          {nextAppointment ? (
            <div className="appointment-info">
              <div className="appointment-date">
                {new Date(nextAppointment.date).toLocaleDateString()}
              </div>
              <div className="appointment-time">
                {nextAppointment.time}
              </div>
              <div className="appointment-doctor">
                Dr. {nextAppointment.doctorName}
              </div>
              <div className="appointment-type">
                {nextAppointment.type}
              </div>
            </div>
          ) : (
            <div className="no-appointment">
              <p>No upcoming appointments</p>
              <button className="btn-primary">Book Appointment</button>
            </div>
          )}
        </div>

        {/* Notifications */}
        <div className="dashboard-card notifications-card">
          <h3>
            <Bell className="card-icon" />
            Recent Notifications
          </h3>
          <div className="notifications-list">
            {notifications.length > 0 ? (
              notifications.slice(0, 3).map((notification, index) => (
                <div key={index} className="notification-item">
                  <div className="notification-icon">
                    {notification.type === 'medication' && 'üíä'}
                    {notification.type === 'appointment' && 'üìÖ'}
                    {notification.type === 'health' && '‚ù§Ô∏è'}
                  </div>
                  <div className="notification-content">
                    <p>{notification.message}</p>
                    <span className="notification-time">
                      {new Date(notification.time).toLocaleTimeString()}
                    </span>
                  </div>
                </div>
              ))
            ) : (
              <p>No recent notifications</p>
            )}
          </div>
        </div>

        {/* AI Chat Widget */}
        <div className="dashboard-card chat-card">
          <h3>
            <MessageCircle className="card-icon" />
            Health Assistant
          </h3>
          <div className="chat-preview">
            <p>Ask me anything about your health, medications, or appointments!</p>
            <button className="btn-secondary">Start Chat</button>
          </div>
        </div>

        {/* Recent Records */}
        <div className="dashboard-card records-card">
          <h3>
            <User className="card-icon" />
            Recent Health Records
          </h3>
          <div className="records-list">
            {healthMetrics.recentRecords ? (
              healthMetrics.recentRecords.map((record, index) => (
                <div key={index} className="record-item">
                  <span className="record-date">
                    {new Date(record.date).toLocaleDateString()}
                  </span>
                  <span className="record-type">{record.type}</span>
                  <span className="record-value">{record.value}</span>
                </div>
              ))
            ) : (
              <p>No recent records</p>
            )}
          </div>
        </div>

        {/* Quick Actions */}
        <div className="dashboard-card actions-card">
          <h3>Quick Actions</h3>
          <div className="actions-grid">
            <button className="action-btn">
              <Calendar size={20} />
              Book Appointment
            </button>
            <button className="action-btn">
              <Activity size={20} />
              Update BMI
            </button>
            <button className="action-btn">
              <Heart size={20} />
              Add Health Record
            </button>
            <button className="action-btn">
              <MessageCircle size={20} />
              Contact Doctor
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;